Python é uma linguagem de programação que busca simplicidade em sua sintaxe, o que resulta em maior legibilidade e produtividade.
Pode ser executado em diversos sistemas operacionais.

Pode ser utilizado em:
- criação de aplicaçãoes web;
-automação de tarefas repetitivas;
-aplicativos desktop;
-aplicação para dispositivos móveis (não tão recomendada)

O sistema operacional Linux e mac normalmente já vem com uma versão Python instalada.
Para verificar, digite  no terminal: python3.
Esse tipo de terminal é chamado de REPL (Read-Eval-Print-Loop) ou Terminal Interativo.

Operações básicas aritméticas:
2 * 3  # saída: 6
2 + 3  # saída: 5
3 / 2  # saída: 1.5
3 // 2  # saída: 1  // realiza a divisão e arredonda o resultado para baixo. Ou seja, realiza o quociente.
3 / 2  # saída: 1.5

Atribuição:
square_root = 25 ** (1/2)  # raiz quadrada de 25. O operador `**` significa "elevado a"
print(square_root + 1)  # saída: 6.0

Operalções lógicas
temperatura < 25 and temperatura > 18
18 < temperatura < 25
idade <= 5 or idade >= 65

help(list) -> para saber os comandos disponíveis.

Tipos de dados:
- bool: atenção ao início maiúsculo dessas palavras reservadas (True, False);
- Números inteiros (int): sem parte frcionária.
- Número fracionários (float)
- Tuplas(tuple): são listas que não podem ser modificadas durante a execução do programa.
  Ex.: user = ("Will", "Marcondes", 42)  # elementos são definidos separados por vírgula, envolvidos por parênteses
       user[0]  # acesso também por índices
- Conjuntos (set): connjunto de coleção de elementos únicos e não ordenados.
  EX.: permissions = {"member", "group"}  # elementos separados por vírgula, envolvidos por chaves
- Conjuntos imutáveis (frozenset)
  Ex.: permissions = frozenset(["member", "group"])
- Dicionparios (dict): estrutura chave-valor, objeto do Javascript.
  Ex.: people_by_id = {1: "Maria", 2: "Fernanda", 3: "Felipe"}  # elementos no formato "chave: valor" separados por vírgula, envolvidos por chaves
  # elementos podem ser removidos com a palavra chave del
  del people_by_id[1]
  # Em Python, precisamos colocar a chave do objeto entre aspas.
  info["recorrente"] = "Sim"
-range: estrutura capaz de gerar uma sequência numérica de um valor inicial até um valor final.
  Ex.: # definimos somente o valor de parada
      list(range(5))  # saída: [0, 1, 2, 3, 4]

      # definimos o valor inicial e o de parada
      list(range(1, 6))  # saída: [1, 2, 3, 4, 5]

      # definimos valor inicial, de parada e modificamos o passo para 2
     list(range(1, 11, 2))  # saída: [1, 3, 5, 7, 9]

COndicionais:
A indentação do código deve ser feita com 4 espaços em vez de tabs.

position = ""
if salary <= 2000:
    position = "estagiário"
elif 2000 < salary <= 5800:
    position = "júnior"
elif 5800 < salary <= 7500:
    position = "pleno"
elif 7500 < salary <= 10500:
    position = "senior"
else:
    position = "líder"

For:
restaurants = [
    {"name": "Restaurante A", "nota": 4.5},
    {"name": "Restaurante B", "nota": 3.0},
    {"name": "Restaurante C", "nota": 4.2},
    {"name": "Restaurante D", "nota": 2.3},
]

filtered_restaurants = []
min_rating = 3.0

for restaurant in restaurants:
    if restaurant["nota"] > min_rating:
        filtered_restaurants.append(restaurant)
print(filtered_restaurants)  # imprime a lista de restaurantes, sem o B e D

Enumerate:
languages = ['Python', 'Java', 'JavaScript']

enumerate_prime = enumerate(languages)

# converte um objeto enumerate em uma lista
print(list(enumerate_prime))

# Saída: [(0, 'Python'), (1, 'Java'), (2, 'JavaScript')]