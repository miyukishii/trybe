//Introdução

// O JWT é uma maneira inteligente de obter a identidade de um usuário com segurança!
// Exemplo: gostaria de verificar se a conta de uma pessoa está ativa mesmo que ela tenha desligado o computador/celular.
// Poderíamos usar cookies, porém não é uma boa opção pq o usuário pode não aceitar seus cookies, não temos controle de onde está rodando, o site fica mais pesado dependendo do cookie utilizado.
//Logo, a alternativa seria usar o JWT, que disponibliza token/hash/código criptografado que pode ser enviado para uma API e validá-lo como preferir.
// Com a JWT não utiliza banco de dados, ou seja, consultaremos menos o banco de dados, o que nos dá tempo de resposta menos.
// Mais simples de usar
// Utilizado em vários serviços.

// JWT - Jason Web Token
// É uma padrão de mercado que define um token em formato de JSON, no qual as informações são trocadas de forma leve, segura e autcontida.
// Leveza - por adotar o JSON como base, para troca de informações.
// Autocontido - traz consigo, todas as informações necessárias para decriptar o mesmo.
// Seguro - Valida a integridade do toke, utilizando algoritmos de hashing.

// Quando utilizar?
// Em troca de informações entre aplicações.
// Em mecanismos de autenticações e autorizações.

// Como torna mais seguro?
// Torna mais seguro, pq normalmente é criptografado através de algoritmos:
// - HMAC - Usa de uma chave secreta que criptografa e descriptografa. É um altoritmo para gerar um MAC (código de autenticação de mensagem) criptografado através de algum algoritmo de hash (algoritmos que codificam mensagens).
// - RSA - Usa par de chaes pública e privada.

// Quais elementos compõem um JWT?
// O resultado final do JWT gerado é uma hash que é dividida em 3 partes, separadas por ponto:
// - Header: 
// - Payload
// - Signature

// A autenticação sempre vem antes da autorização.

// Entendendo o JWT
// o resultado final do JWT dá-se através da assinatura criptográfica de dois blocos de JSON codificados em base64.
// Esses dois blocos JSON codificados são o header (cabeçalho) e pauload (carga).
// A assignature é a junção dos hashes gerador a partir do header e do payload.

// Header:
// Contém duas propriedades: o tipo do token (typ), no caso JWT, e o tipo do algoritmo de hash, como HMAC-SHA256 ou RSA:
// {
//   "alg": "HS256",
//   "typ": "JWT"
// }

//Payload: 
// Esta é a segunda parte do token, que contém dados. Declarações sobre uma entidade geralmente o usuário:
// {
//     "sub": "1234567890",
//     "name": "John Doe",
//     "admin": true
//   }

// Signature:
// Para gerar assinatura, deve usar o header e payload codificados em base64, usando o algoritmo definido no header.

// Modelos
// Modelos são responsáveis por fazer o mapeamento entre as entidades que sua aplicação manipula e a camada de dados. Contêm todas as interações responsáveis por ler e escrever dados no seu banco de dados.

// Estão organizados dentro da pasta models.

// Migrations
// Migrations são responsáveis por criar e/ou restaurar as alterações no banco de dados.

// Estão organizados dentro da pasta migrations e há uma migration para cada tabela no banco de dados. No exemplo, existem as tabelas Users e Posts.

// Seeders
// Seeders são responsáveis por povoar os dados das tabelas do banco de dados.

// Estão organizadas dentro da pasta seeders. No exemplo, existem seeders para as tabelas Users e Posts.

// Services
// Estão concentradas as regras de negócio da aplicação, fazendo a comunicação entre camada de modelo e de controle.

// Controllers
// Controllers são as funções utilizadas como callbacks na definição de rotas. Eles são responsáveis por lidar com as requisições que chegam nas diferentes rotas de sua aplicação e criando a resposta que será enviada para o cliente. Normalmente, interagem com um ou mais modelos para ler/escrever dados do banco de dados.

// A API possui quatro controllers:

// createUser.js: Lida com a criação de novas pessoas usuárias.

// getUsers.js: Encontra as pessoas usuárias cadastradas.

// login.js: Responsável pela lógica de login.

// posts.js: Encontra os posts de um usuário.

// src/routes.js
// Esse é um arquivo que concentra os controllers do projeto.

// src/app.js
// Aqui é onde é criado de fato a API com o Express. Também é onde todas as rotas são configuradas.

// src/server.js
// Arquivo que configura as portas da aplicação e inicia o servidor Express.

// .env.example -> .env
// Este arquivo é responsável por guardar os dados sensíveis do servidor. Este arquivo deve ser editado com as credencias MySQL da pessoa desenvolvedora. Neste exemplo, está sendo utilizado o usuário root com senha inexistente. **warning O arquivo .env arquivo não deve ser commitado na esmagadora parte das vezes, pois armazena dados sensíveis. ** warning Lembre-se de editar este arquivo com as suas credencias.