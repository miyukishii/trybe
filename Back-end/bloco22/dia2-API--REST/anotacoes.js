// APIs Web √© a ferramenta definitiva para conectar o front-end de uma aplica√ß√£o aos dados que ela precisa salvar e receber. O padr√£o REST, rotas e aplica√ß√µes C.R.U.D s√£o partes do conhecimento de como se fazer uma boa API - conhecimento que te far√° brilhar em in√∫meros processos seletivos!

// Servidor Web s√£o programas de computador que entregam algum tipo de informa√ß√£o ou p√°gina a quem os solicita atrav√©s da internet.

// O comando npm init -y cria um arquivo package.json, onde ser√° configurado as depend√™ncias que usar√° ao longo da constru√ß√£o da API.

// Framework Express = Nos ajuda a organizar e a construir APIs robustas e flex√≠veis, nos dando ferramentas que fazem as coisas acontecerem com poucas linhas de c√≥digo.
// O que √© framework? Um framework ele te sugere uma forma espec√≠fica de construir sua aplica√ß√£o e te d√° ferramentas pra fazer isso mais r√°pido.

// Para instalar a framworkd Express na aplica√ß√£o, utiliza-se:
// npm i express@4.17
// Ap√≥s executar o comando acima, um arquivo e um diret√≥rio ir√£o ser criados automaticamente - o package-lock.json e o node_modules!

// O arquivo package-lock-json serve para gerenciar as depend√™ncias de nossas depend√™ncias;
// O diret√≥rio node_modules √© onde todas as nossas depend√™ncias, e depend√™ncias de nossas depend√™ncias, ser√£o instaladas.

// √â fundamental garantir a qualidade de escrita do nosso c√≥digo. Por isso devemos instalar o ESlint. Para instalar com as regras que se utiliza na trybe, utiliza-se o comando:
// npm i eslint@6.8 eslint-config-trybe-backend@1.0 -D

//  crie os arquivos referentes a configura√ß√£o do ESLint na raiz:
// touch .eslintignore .eslintrc.json
// .eslintignore: Usado para voc√™ dizer ao ESLint que ignore arquivos e diret√≥rios espec√≠ficos;
// .eslintrc.json: Usado para voc√™ sobrescrever regras do ESLint;

//Finalize inicializando um reposit√≥rio git na pasta da aplica√ß√£o, criando e configurando o arquivo .gitignore:
// git init && touch .gitignore
// node_modules

//Com base nisso, surge o pacote do nodemon. Usando o servidor com nodemon, toda vez que voc√™ salvar algum arquivo, ele reinicia sua aplica√ß√£o automagicamente! 

// O conjunto de opera√ß√µes CRUD
// C - create 
// R - read
// U - update
// D - delete

// No contexto de Back-end, rotas representam as portas de entrada para a sua API.
//As a√ß√µes do C.R.U.D.: Criar, ler, atualizar e remover. Pois √©, nossa API ter√° quatro rotas. De olho na dicaüëÄ: Rotas podem ser chamadas de caminhos, paths e endpoints de uma API.

// O que √© HTTP ? Protocolo de transfer√™ncia de hipertexto (qualquer m√≠dia).
// API - √â uma esp√©cie de sotware que retorna respostas.